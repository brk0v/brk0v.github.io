<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>What every SRE should know on Viacheslav Biriukov</title><link>https://biriukov.dev/</link><description>Recent content in What every SRE should know on Viacheslav Biriukov</description><generator>Hugo</generator><language>en-us</language><atom:link href="https://biriukov.dev/index.xml" rel="self" type="application/rss+xml"/><item><title>GNU/Linux shell related internals</title><link>https://biriukov.dev/docs/fd-pipe-session-terminal/0-sre-should-know-about-gnu-linux-shell-related-internals-file-descriptors-pipes-terminals-user-sessions-process-groups-and-daemons/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://biriukov.dev/docs/fd-pipe-session-terminal/0-sre-should-know-about-gnu-linux-shell-related-internals-file-descriptors-pipes-terminals-user-sessions-process-groups-and-daemons/</guid><description>&lt;h1 id="what-every-sre-should-know-about-gnulinux-shell-related-internals-file-descriptors-pipes-terminals-user-sessions-process-groups-and-daemons">
 What every SRE should know about GNU/Linux shell related internals: file descriptors, pipes, terminals, user sessions, process groups and daemons
 &lt;a class="anchor" href="#what-every-sre-should-know-about-gnulinux-shell-related-internals-file-descriptors-pipes-terminals-user-sessions-process-groups-and-daemons">#&lt;/a>
&lt;/h1>
&lt;p>Despite the era of containers, virtualization, and the rising number of UI of all kinds, SREs often spend a significant part of their time in GNU/Linux shells. It could be debugging, testing, developing, or preparing the new infrastructure. It may be the good old &lt;code>bash&lt;/code>, the more recent and fancy &lt;code>zsh&lt;/code>, or even &lt;code>fish&lt;/code> or &lt;code>tcsh&lt;/code> with their interesting and unique features.&lt;/p></description></item><item><title>Linux Page Cache for SRE</title><link>https://biriukov.dev/docs/page-cache/0-linux-page-cache-for-sre/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://biriukov.dev/docs/page-cache/0-linux-page-cache-for-sre/</guid><description>&lt;h1 id="sre-deep-dive-into-linux-page-cache">
 SRE deep dive into Linux Page Cache
 &lt;a class="anchor" href="#sre-deep-dive-into-linux-page-cache">#&lt;/a>
&lt;/h1>
&lt;p>In this series of articles, I would like to talk about &lt;strong>Linux Page Cache&lt;/strong>. I believe that the following knowledge of the theory and tools is &lt;strong>essential and crucial for every SRE&lt;/strong>. This understanding can help both in usual and routine everyday DevOps-like tasks and in emergency debugging and firefighting. Page Cache is often left unattended, and its better understanding leads to the following:&lt;/p></description></item><item><title>What every SRE should know about GNU/Linux resolvers and Dual-Stack applications</title><link>https://biriukov.dev/docs/resolver-dual-stack-application/0-sre-should-know-about-gnu-linux-resolvers-and-dual-stack-applications/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://biriukov.dev/docs/resolver-dual-stack-application/0-sre-should-know-about-gnu-linux-resolvers-and-dual-stack-applications/</guid><description>&lt;h1 id="what-every-sre-should-know-about-gnulinux-resolvers-and-dual-stack-applications">
 What every SRE should know about GNU/Linux resolvers and Dual-Stack applications
 &lt;a class="anchor" href="#what-every-sre-should-know-about-gnulinux-resolvers-and-dual-stack-applications">#&lt;/a>
&lt;/h1>
&lt;p>In this series of posts, I’d like to make a deep dive into the GNU/Linux local facilities used to convert a domain name or hostname into IP addresses, specifically in the context of dual-stack applications. This process of resolution is one of the oldest forms of networking abstraction, designed to replace hard-to-remember network addresses with human-readable strings. Although it may seem simple at first glance, the entire process involving stub resolvers is filled with complexities and subtle nuances. One contributing factor to this complexity is the growing number of IPv6 addresses, which, although not increasing at the pace everyone might want, is gradually changing servers and clients to support dual-stack hosts. Thus a seamless transition to IPv6 become an important feature and should occur without degrading user experience or increasing response latency.&lt;/p></description></item><item><title>File descriptor and open file description</title><link>https://biriukov.dev/docs/fd-pipe-session-terminal/1-file-descriptor-and-open-file-description/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://biriukov.dev/docs/fd-pipe-session-terminal/1-file-descriptor-and-open-file-description/</guid><description>&lt;h1 id="file-descriptor-and-open-file-description">
 File descriptor and open file description
 &lt;a class="anchor" href="#file-descriptor-and-open-file-description">#&lt;/a>
&lt;/h1>
&lt;p>First of all, I want to touch on the two fundamental concepts of working with files:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>file descriptor;&lt;/strong>&lt;/li>
&lt;li>&lt;strong>open file description&lt;/strong>.&lt;/li>
&lt;/ul>
&lt;p>These two abstractions are crucial for understanding the internals of a process creation, communication, and data transition.&lt;/p>
&lt;p>The first concept is a &lt;strong>file descriptor&lt;/strong> or &lt;strong>&lt;code>fd&lt;/code>&lt;/strong>. It’s a positive integer number used by file system calls instead of a file path in order to make a variety of operations. Every process has its own &lt;strong>file descriptor table&lt;/strong> (see Image 1 below). The main idea of a file descriptor is to decouple a file path (or, more correctly, an inode with minor and major device numbers) from a file object inside a process and the Linux kernel. This allows software developers to open the same file an arbitrary number of times for different purposes, with various flags (for instance: &lt;code>O_DIRECT&lt;/code>, &lt;code>O_SYNC&lt;/code>, &lt;code>O_APPEND&lt;/code>, etc.), and at different offsets.&lt;/p></description></item><item><title>Prepare environment for experiments</title><link>https://biriukov.dev/docs/page-cache/1-prepare-environment-for-experiments/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://biriukov.dev/docs/page-cache/1-prepare-environment-for-experiments/</guid><description>&lt;h1 id="prepare-environment-for-experiments">
 Prepare environment for experiments
 &lt;a class="anchor" href="#prepare-environment-for-experiments">#&lt;/a>
&lt;/h1>
&lt;p>Before starting, I want to be on the same page with the reader so that any example or code snippet can be executed, compiled, and checked. Therefore we need a modern GNU/Linux installation to play with code and kernel.&lt;/p>
&lt;p>If you are using Windows or Mac OS, I would suggest installing &lt;a href="https://www.vagrantup.com" target="_blank" rel="noopener">Vagrant&lt;/a> with &lt;a href="https://www.virtualbox.org/" target="_blank" rel="noopener">Virtual Box&lt;/a>. For the GNU/Linux distributive, I&amp;rsquo;d like to use &lt;a href="https://archlinux.org/" target="_blank" rel="noopener">Arch Linux&lt;/a>. Arch is a good example of an actual modern version of the GNU/Linux system (&lt;a href="https://i.redd.it/qxsttm8sg5k11.png" target="_blank" rel="noopener">BTW, I use Arch Linux&lt;/a>). It supports the latest kernels, systemd and cgroup v2.&lt;/p></description></item><item><title>What is a stub resolver?</title><link>https://biriukov.dev/docs/resolver-dual-stack-application/1-what-is-a-stub-resolver/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://biriukov.dev/docs/resolver-dual-stack-application/1-what-is-a-stub-resolver/</guid><description>&lt;h1 id="1-what-is-a-stub-resolver">
 1. What is a stub resolver?
 &lt;a class="anchor" href="#1-what-is-a-stub-resolver">#&lt;/a>
&lt;/h1>
&lt;p>First of all, let’s shed some light on what a stub resolver is.&lt;/p>
&lt;p>Whenever someone begins talking about hostname resolution issues or nameserver changes, the first thing most people think of is the &lt;code>/etc/resolv.conf&lt;/code> configuration file. Indeed, &lt;code>/etc/resolv.conf&lt;/code> is a core and fundamental part of the local resolver system, and we will discuss it in detail later in this series, including how it’s managed on modern GNU/Linux distributions with &lt;code>systemd&lt;/code>. However, it’s far from being the only component involved in converting a hostname string into a list of IP addresses. Often, other lesser-known parts of the system may cause unpredictable behaviors and have their own unique features and limitations.&lt;/p></description></item><item><title>History: gethostbyname() and old good friends</title><link>https://biriukov.dev/docs/resolver-dual-stack-application/2-history-gethostbyname/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://biriukov.dev/docs/resolver-dual-stack-application/2-history-gethostbyname/</guid><description>&lt;h1 id="2-history-gethostbyname-and-old-good-friends">
 2. History: &lt;code>gethostbyname()&lt;/code> and old good friends
 &lt;a class="anchor" href="#2-history-gethostbyname-and-old-good-friends">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint warning">
 Please do not use any of the code snippets from this chapter in your projects. They are provided solely for historical and educational purposes. Instead, you should use &lt;code>getaddrinfo()&lt;/code>.
&lt;/blockquote>

&lt;p>The &lt;code>gethostbyname&lt;/code> (&lt;code>&lt;a href="https://man7.org/linux/man-pages/man3/gethostbyname.3.html" target="_blank" rel="noopener">man 3 gethostbyname&lt;/a>&lt;/code>) function first appeared in the 1980s and has been a part of the networking landscape ever since. Despite its obsoletion, some programs still use it. It was deprecated in POSIX.1-2001, over two decades ago, due to its internal design limitations and limited functionality. However, for a long time, it was the preferred and standardized helper function for resolving a domain name into a list of IP addresses.&lt;/p></description></item><item><title>Pipes</title><link>https://biriukov.dev/docs/fd-pipe-session-terminal/2-pipes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://biriukov.dev/docs/fd-pipe-session-terminal/2-pipes/</guid><description>&lt;h1 id="pipes">
 Pipes
 &lt;a class="anchor" href="#pipes">#&lt;/a>
&lt;/h1>
&lt;p>The pipe is a neat feature of the Linux kernel that allows us to build &lt;strong>one-directional communication channels&lt;/strong> between related processes (often a parent and a child).&lt;/p>
&lt;p>Pipes are usually well known from shells, where we use &amp;ldquo;&lt;code>|&lt;/code>&amp;rdquo; symbol to build command pipelines. But first of all, the pipe is a system call, or actually, there are 2 of them: &lt;code>pipe()&lt;/code> and &lt;code>pipe2()&lt;/code> (&lt;code>&lt;a href="https://man7.org/linux/man-pages/man2/pipe.2.html" target="_blank" rel="noopener">man 2 pipe&lt;/a>&lt;/code>).&lt;/p>
&lt;p>You can think of a pipe as a memory buffer with a &lt;strong>byte stream&lt;/strong> API. Thus, by default, there are no messages or strict boundaries. The situation has changed since the Linux kernel 3.4 where the &lt;code>O_DIRECT&lt;/code> flag and the &lt;a href="https://man7.org/linux/man-pages/man2/pipe.2.html" target="_blank" rel="noopener">packet mode&lt;/a> were introduced. We will touch all variant of working with pipes in this chapter.&lt;/p></description></item><item><title>Essential Linux Page Cache theory</title><link>https://biriukov.dev/docs/page-cache/2-essential-page-cache-theory/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://biriukov.dev/docs/page-cache/2-essential-page-cache-theory/</guid><description>&lt;h1 id="essential-page-cache-theory">
 Essential Page Cache theory
 &lt;a class="anchor" href="#essential-page-cache-theory">#&lt;/a>
&lt;/h1>
&lt;p>First of all, let’s start with a bunch of reasonable questions about Page Cache:&lt;/p>
&lt;ul>
&lt;li>What is the &lt;strong>Linux Page Cache&lt;/strong>?&lt;/li>
&lt;li>What problems does it solve?&lt;/li>
&lt;li>Why do we call it &lt;strong>«Page»&lt;/strong> Cache ?&lt;/li>
&lt;/ul>
&lt;p>In essence, the Page Cache is a part of the Virtual File System (&lt;a href="https://en.wikipedia.org/wiki/Virtual_file_system" target="_blank" rel="noopener">VFS&lt;/a>) whose primary purpose, as you can guess, is improving the IO latency of read and write operations. A write-back cache algorithm is a core building block of the Page Cache.&lt;/p></description></item><item><title>getaddrinfo() and POSIX spec</title><link>https://biriukov.dev/docs/resolver-dual-stack-application/3-getaddrinfo-and-posix-spec/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://biriukov.dev/docs/resolver-dual-stack-application/3-getaddrinfo-and-posix-spec/</guid><description>&lt;h1 id="3-getaddrinfo-and-posix-spec">
 3. &lt;code>getaddrinfo()&lt;/code> and POSIX spec
 &lt;a class="anchor" href="#3-getaddrinfo-and-posix-spec">#&lt;/a>
&lt;/h1>
&lt;p>Thus, instead of the deprecated &lt;code>gethostbyname()&lt;/code>, &lt;code>getaddrinfo()&lt;/code> should be used within &lt;code>libc&lt;/code>. The &lt;code>getaddrinfo()&lt;/code> function is a POSIX-&lt;a href="https://pubs.opengroup.org/onlinepubs/9799919799.2024edition/functions/getaddrinfo.html" target="_blank" rel="noopener">standardized&lt;/a> function and is defined in &lt;a href="http://www.ietf.org/rfc/rfc3493.txt" target="_blank" rel="noopener">RFC 3943&lt;/a>. It is IP version agnostic and returns data structures that can be easily reused in subsequent socket API calls (such as &lt;code>socket()&lt;/code>, &lt;code>connect()&lt;/code>, &lt;code>sendto()&lt;/code>).&lt;/p>
&lt;p>First of all, if you have a codebase that uses &lt;code>gethostbyname()&lt;/code> and you are looking to migrate to the modern &lt;code>getaddrinfo()&lt;/code>, I have bad news: it’s not a drop-in replacement. You need to understand the new data structures, logic and flags.&lt;/p></description></item><item><title>Process groups, jobs and sessions</title><link>https://biriukov.dev/docs/fd-pipe-session-terminal/3-process-groups-jobs-and-sessions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://biriukov.dev/docs/fd-pipe-session-terminal/3-process-groups-jobs-and-sessions/</guid><description>&lt;h1 id="process-groups-jobs-and-sessions">
 Process groups, jobs and sessions
 &lt;a class="anchor" href="#process-groups-jobs-and-sessions">#&lt;/a>
&lt;/h1>
&lt;p>A new process group is created every time we execute a command or a pipeline of commands in a shell. Inside a shell, a &lt;strong>process group&lt;/strong> is usually called a &lt;strong>job&lt;/strong>. In its turn, each process group belongs to a session. Linux kernel provides a &lt;strong>two-level hierarchy&lt;/strong> for all running processes (look at Image 3 below). As such, a process group is a set of processes, and a session is a set of related process groups. Another important limitation is that a process group and its members can be members of a single session.&lt;/p></description></item><item><title>getaddrinfo() from glibc</title><link>https://biriukov.dev/docs/resolver-dual-stack-application/4-getaddrinfo-from-glibc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://biriukov.dev/docs/resolver-dual-stack-application/4-getaddrinfo-from-glibc/</guid><description>&lt;h1 id="4-getaddrinfo-from-glibc">
 4. &lt;code>getaddrinfo()&lt;/code> from &lt;code>glibc&lt;/code>
 &lt;a class="anchor" href="#4-getaddrinfo-from-glibc">#&lt;/a>
&lt;/h1>
&lt;p>The standard in POSIX describes only the behavior and interface of the &lt;code>getaddrinfo()&lt;/code> function. However, the actual implementation can vary between different frameworks. In this chapter, we will examine the internals of the &lt;code>getaddrinfo()&lt;/code> implementation from &lt;code>glibc&lt;/code> version 2.39. In the GNU/Linux world the &lt;code>glibc&lt;/code> remains the default C library for the overwhelming majority of systems.&lt;/p>
&lt;h2 id="41-internals-and-design">
 4.1 Internals and design
 &lt;a class="anchor" href="#41-internals-and-design">#&lt;/a>
&lt;/h2>
&lt;p>Even though the main purpose of a stub resolver is to send DNS queries to a recursive server, the reality is more complex than that. The chart below illustrates the main steps that the &lt;code>glibc&lt;/code> &lt;code>getaddrinfo()&lt;/code> function performs each time you call it.&lt;/p></description></item><item><title>Terminals and pseudoterminals</title><link>https://biriukov.dev/docs/fd-pipe-session-terminal/4-terminals-and-pseudoterminals/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://biriukov.dev/docs/fd-pipe-session-terminal/4-terminals-and-pseudoterminals/</guid><description>&lt;h1 id="terminals-and-pseudoterminals">
 Terminals and pseudoterminals
 &lt;a class="anchor" href="#terminals-and-pseudoterminals">#&lt;/a>
&lt;/h1>
&lt;p>Terminals come to us from the history of &lt;code>UNIX&lt;/code> systems. Basically, terminals provided an API for the console utils (physical ones!) to generalize interaction with users. It includes ways of reading input and writing to it in &lt;strong>two&lt;/strong> modes:&lt;/p>
&lt;ul>
&lt;li>the &lt;strong>canonical&lt;/strong> mode (default) – input is buffered line by line and read into after a new line char &lt;code>\n&lt;/code> occurs;&lt;/li>
&lt;li>the &lt;strong>noncanonical&lt;/strong> mode – an application can read terminal input a character at a time. For example &lt;code>vi&lt;/code>, &lt;code>emacs&lt;/code> and &lt;code>less&lt;/code> use this mode.&lt;/li>
&lt;/ul>
&lt;p>Nowadays, with the widespread use of rich graphical UIs, the significance of the terminals are lesser than it was, but still, we use this protocol implicitly every time we start an ssh connection.&lt;/p></description></item><item><title>getaddrinfo() from musl libc</title><link>https://biriukov.dev/docs/resolver-dual-stack-application/5-getaddrinfo-from-musl-libc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://biriukov.dev/docs/resolver-dual-stack-application/5-getaddrinfo-from-musl-libc/</guid><description>&lt;h1 id="5-getaddrinfo-from-musl-libc">
 5. &lt;code>getaddrinfo()&lt;/code> from &lt;code>musl&lt;/code> &lt;code>libc&lt;/code>
 &lt;a class="anchor" href="#5-getaddrinfo-from-musl-libc">#&lt;/a>
&lt;/h1>
&lt;p>&lt;code>musl libc&lt;/code> is a lightweight, fast, and simple implementation of the standard C library (&lt;code>libc&lt;/code>) that aims for efficiency, standards compliance, and security.&lt;/p>
&lt;p>It gained popularity following its extensive use in &lt;a href="https://alpinelinux.org/" target="_blank" rel="noopener">Alpine Linux&lt;/a>, a security-oriented, lightweight Linux distribution often used as a base image for Docker containers.&lt;/p>
&lt;p>However, it is crucial for us to understand that &lt;code>musl libc&lt;/code> incorporates a completely new resolver code that behaves differently in certain &lt;a href="https://wiki.musl-libc.org/functional-differences-from-glibc.html#Name_Resolver_.2F_DNS" target="_blank" rel="noopener">situations&lt;/a>. The most significant differences include:&lt;/p></description></item><item><title>Page Cache and basic file operations</title><link>https://biriukov.dev/docs/page-cache/3-page-cache-and-basic-file-operations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://biriukov.dev/docs/page-cache/3-page-cache-and-basic-file-operations/</guid><description>&lt;h1 id="page-cache-and-basic-file-operations">
 Page Cache and basic file operations
 &lt;a class="anchor" href="#page-cache-and-basic-file-operations">#&lt;/a>
&lt;/h1>
&lt;p>Now it&amp;rsquo;s time to roll up our sleeves and get started with some practical examples. By the end of this chapter, you will know how to interact with Page Cache and which tools you can use.&lt;/p>
&lt;p>Utils needed for this section:&lt;/p>
&lt;ul>
&lt;li>&lt;code>sync&lt;/code> (&lt;a href="https://man7.org/linux/man-pages/man1/sync.1.html" target="_blank" rel="noopener">&lt;code>man 1 sync&lt;/code>&lt;/a>) – a tool to flush all dirty pages to persistent storage;&lt;/li>
&lt;li>&lt;code>/proc/sys/vm/drop_caches&lt;/code> (&lt;a href="https://man7.org/linux/man-pages/man5/proc.5.html" target="_blank" rel="noopener">&lt;code>man 5 proc&lt;/code>&lt;/a>) – the kernel &lt;code>procfs&lt;/code> file to trigger Page Cache clearance;&lt;/li>
&lt;li>&lt;a href="https://github.com/hoytech/vmtouch" target="_blank" rel="noopener">&lt;code>vmtouch&lt;/code>&lt;/a> – a tool for getting Page Cache info about a particular file by its path.&lt;/li>
&lt;/ul>
&lt;blockquote class="book-hint info">
 &lt;strong>NOTE&lt;/strong>
For now, we ignore how &lt;code>vmtouch&lt;/code> works. I&amp;rsquo;m showing how to write an alternative with almost all its features later.
&lt;/blockquote>

&lt;h2 id="file-reads">
 File reads
 &lt;a class="anchor" href="#file-reads">#&lt;/a>
&lt;/h2>
&lt;h3 id="reading-files-with-read-syscall">
 Reading files with &lt;code>read()&lt;/code> syscall
 &lt;a class="anchor" href="#reading-files-with-read-syscall">#&lt;/a>
&lt;/h3>
&lt;p>I start with a simple program that reads the first 2 bytes from our test file &lt;code>/var/tmp/file1.db&lt;/code>.&lt;/p></description></item><item><title>Dual-Stack applications</title><link>https://biriukov.dev/docs/resolver-dual-stack-application/6-dual-stack-applications/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://biriukov.dev/docs/resolver-dual-stack-application/6-dual-stack-applications/</guid><description>&lt;h1 id="6-dual-stack-applications">
 6. Dual-Stack applications
 &lt;a class="anchor" href="#6-dual-stack-applications">#&lt;/a>
&lt;/h1>
&lt;img alt="IPv4 or IPv6" src="../images/dns_two_buttons.png" width="50%" class="img-center">
&lt;p>Let’s now focus on dual-stack programs, which support both IPv4 and IPv6. Here are some critical questions to consider:&lt;/p>
&lt;p>For server code:&lt;/p>
&lt;ul>
&lt;li>How can we easily listen on all IPv4 and all IPv6 addresses? Do we need separate listeners for each?&lt;/li>
&lt;li>Are there any tools or helpers available to manage multiple listeners?&lt;/li>
&lt;/ul>
&lt;p>For client code:&lt;/p>
&lt;ul>
&lt;li>Which address family should our client program resolve and use: &lt;code>A&lt;/code>, &lt;code>AAAA&lt;/code>, or both?&lt;/li>
&lt;li>What to do if the resolver returns multiple addresses for each family?&lt;/li>
&lt;li>Does a machine have active IPv4 and IPv6 connectivity? Is the IPv6 routing configured correctly to the destination?&lt;/li>
&lt;li>In case of connection errors, which address should be used to reconnect?&lt;/li>
&lt;/ul>
&lt;p>Ideally, we want to abstract away from these technical details to focus more on developing our core business logic, such as converting &lt;code>JSON&lt;/code>s to &lt;code>protobuf&lt;/code>s and vice versa. 🙃&lt;/p></description></item><item><title>Async non-blocking resolvers in C</title><link>https://biriukov.dev/docs/resolver-dual-stack-application/7-async-non-blocking-resolvers-in-c/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://biriukov.dev/docs/resolver-dual-stack-application/7-async-non-blocking-resolvers-in-c/</guid><description>&lt;h1 id="7-async-non-blocking-resolvers-in-c">
 7. Async non-blocking resolvers in &lt;code>C&lt;/code>
 &lt;a class="anchor" href="#7-async-non-blocking-resolvers-in-c">#&lt;/a>
&lt;/h1>
&lt;p>Now that we’ve covered the essential theory, let’s explore alternative stub resolver libraries and frameworks for the &lt;code>C&lt;/code> language. Other languages will be discussed next, but don’t skip this chapter, as it contains foundational information that will be referenced later.&lt;/p>
&lt;h2 id="71-getaddrinfo_a">
 7.1 &lt;code>getaddrinfo_a()&lt;/code>
 &lt;a class="anchor" href="#71-getaddrinfo_a">#&lt;/a>
&lt;/h2>
&lt;p>&lt;code>getaddrinfo_a&lt;/code> (&lt;code>&lt;a href="https://www.man7.org/linux/man-pages/man3/getaddrinfo_a.3.html" target="_blank" rel="noopener">man 7 getaddrinfo_a&lt;/a>&lt;/code>) is an asynchronous version of &lt;code>getaddrinfo()&lt;/code> but with some limitations: results can be collected by polling or notified by a signal.&lt;/p></description></item><item><title>Page Cache eviction and page reclaim</title><link>https://biriukov.dev/docs/page-cache/4-page-cache-eviction-and-page-reclaim/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://biriukov.dev/docs/page-cache/4-page-cache-eviction-and-page-reclaim/</guid><description>&lt;h1 id="page-cache-eviction-and-page-reclaim">
 Page Cache eviction and page reclaim
 &lt;a class="anchor" href="#page-cache-eviction-and-page-reclaim">#&lt;/a>
&lt;/h1>
&lt;p>So far, we have talked about adding data to Page Cache by reading and writing files, checking the existence of files in the cache, and flushing the cache content manually. But the most crucial part of any cache system is its &lt;strong>eviction policy&lt;/strong>, or regarding Linux Page Cache, it&amp;rsquo;s also the memory &lt;strong>page reclaim&lt;/strong> policy. Like any other cache, Linux Page Cache continuously monitors the last used pages and makes decisions about which pages should be deleted and which should be kept in the cache.&lt;/p></description></item><item><title>Stub resolvers in languages</title><link>https://biriukov.dev/docs/resolver-dual-stack-application/8-stub-resolvers-in-languages/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://biriukov.dev/docs/resolver-dual-stack-application/8-stub-resolvers-in-languages/</guid><description>&lt;h1 id="8-stub-resolvers-in-languages">
 8. Stub resolvers in languages
 &lt;a class="anchor" href="#8-stub-resolvers-in-languages">#&lt;/a>
&lt;/h1>
&lt;p>Let’s now take a look at other popular languages and understand the capabilities, features and options they provide in the context of resolvers.&lt;/p>
&lt;h2 id="81-python">
 8.1 Python
 &lt;a class="anchor" href="#81-python">#&lt;/a>
&lt;/h2>
&lt;p>We are going to talk about &lt;code>cpython&lt;/code> 3.12.&lt;/p>
&lt;h3 id="811--stub-resolvers">
 8.1.1 Stub resolvers
 &lt;a class="anchor" href="#811--stub-resolvers">#&lt;/a>
&lt;/h3>
&lt;p>The Python standard library provides &lt;code>&lt;a href="https://docs.python.org/3/library/socket.html#socket.getaddrinfo:" target="_blank" rel="noopener">socket.getaddrinfo()&lt;/a>&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>socket&lt;span style="color:#f92672">.&lt;/span>getaddrinfo(host, port, family&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>, type&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>, proto&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>, flags&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>which internally calls &lt;code>libc&lt;/code> &lt;code>&lt;a href="https://github.com/python/cpython/blob/5f6001130f8ada871193377954cfcfee01ef93b6/Modules/socketmodule.c#L6679:" target="_blank" rel="noopener">getaddrinfo()&lt;/a>&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/* Python interface to getaddrinfo(host, port). */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/*ARGSUSED*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">static&lt;/span> PyObject &lt;span style="color:#f92672">*&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">socket_getaddrinfo&lt;/span>(PyObject &lt;span style="color:#f92672">*&lt;/span>self, PyObject &lt;span style="color:#f92672">*&lt;/span>args, PyObject&lt;span style="color:#f92672">*&lt;/span> kwargs)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">memset&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>hints, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#66d9ef">sizeof&lt;/span>(hints));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hints.ai_family &lt;span style="color:#f92672">=&lt;/span> family;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hints.ai_socktype &lt;span style="color:#f92672">=&lt;/span> socktype;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hints.ai_protocol &lt;span style="color:#f92672">=&lt;/span> protocol;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hints.ai_flags &lt;span style="color:#f92672">=&lt;/span> flags;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Py_BEGIN_ALLOW_THREADS
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> error &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">getaddrinfo&lt;/span>(hptr, pptr, &lt;span style="color:#f92672">&amp;amp;&lt;/span>hints, &lt;span style="color:#f92672">&amp;amp;&lt;/span>res0);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>There are also &lt;code>&lt;a href="https://docs.python.org/3/library/socket.html#socket.gethostbyname" target="_blank" rel="noopener">socket.gethostbyname()&lt;/a>&lt;/code> and &lt;code>&lt;a href="https://docs.python.org/3/library/socket.html#socket.gethostbyname_ex" target="_blank" rel="noopener">socket.gethostbyname_ex()&lt;/a>&lt;/code>, but they both don&amp;rsquo;t support IPv6.&lt;/p></description></item><item><title>Dual-stack software examples</title><link>https://biriukov.dev/docs/resolver-dual-stack-application/9-dual-stack-software-examples/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://biriukov.dev/docs/resolver-dual-stack-application/9-dual-stack-software-examples/</guid><description>&lt;h1 id="9-dual-stack-software-examples">
 9. Dual-stack software examples
 &lt;a class="anchor" href="#9-dual-stack-software-examples">#&lt;/a>
&lt;/h1>
&lt;h2 id="91-nginx">
 9.1 Nginx
 &lt;a class="anchor" href="#91-nginx">#&lt;/a>
&lt;/h2>
&lt;p>&lt;code>Nginx&lt;/code> treats the hostname as a set of distinct entries rather than multiple paths to the same host. From the upstream module &lt;a href="https://nginx.org/en/docs/http/ngx_http_upstream_module.html#server" target="_blank" rel="noopener">doc&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>A domain name that resolves to several IP addresses defines multiple servers at once.&lt;/p>
&lt;/blockquote>
&lt;p>On start &lt;code>Nginx&lt;/code> resolves all hostnames using its &lt;a href="https://github.com/nginx/nginx/blob/145b228530c364452c14d3184f1eee5e09b324aa/src/core/ngx_inet.c#L1117" target="_blank" rel="noopener">static resolver&lt;/a> with &lt;code>getaddrinfo()&lt;/code> and the &lt;code>AF_UNSPEC&lt;/code> and the &lt;code>AI_ADDRCONFIG&lt;/code> flags.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">ngx_int_t&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">ngx_inet_resolve_host&lt;/span>(&lt;span style="color:#66d9ef">ngx_pool_t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>pool, &lt;span style="color:#66d9ef">ngx_url_t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>u)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hints.ai_family &lt;span style="color:#f92672">=&lt;/span> AF_UNSPEC;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hints.ai_socktype &lt;span style="color:#f92672">=&lt;/span> SOCK_STREAM;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#ifdef AI_ADDRCONFIG
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> hints.ai_flags &lt;span style="color:#f92672">=&lt;/span> AI_ADDRCONFIG;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#endif
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">getaddrinfo&lt;/span>((&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>) host, NULL, &lt;span style="color:#f92672">&amp;amp;&lt;/span>hints, &lt;span style="color:#f92672">&amp;amp;&lt;/span>res) &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> u&lt;span style="color:#f92672">-&amp;gt;&lt;/span>err &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;host not found&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ngx_free&lt;/span>(host);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> NGX_ERROR;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you have a paid Plus version of &lt;code>Nginx&lt;/code> or use a &lt;a href="https://docs.wallarm.com/admin-en/configure-dynamic-dns-resolution-nginx" target="_blank" rel="noopener">workaround with a variable&lt;/a> in &lt;code>proxy_pass&lt;/code>, &lt;code>Nginx &lt;/code>can periodically update in memory resolution cache. In order to enable it, you need to specify the &lt;a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#resolver" target="_blank" rel="noopener">global resolver&lt;/a> first:&lt;/p></description></item><item><title>More about mmap() file access</title><link>https://biriukov.dev/docs/page-cache/5-more-about-mmap-file-access/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://biriukov.dev/docs/page-cache/5-more-about-mmap-file-access/</guid><description>&lt;h1 id="more-about-mmap-file-access">
 More about &lt;code>mmap()&lt;/code> file access
 &lt;a class="anchor" href="#more-about-mmap-file-access">#&lt;/a>
&lt;/h1>
&lt;p>Before we start the cgroup chapter, where I&amp;rsquo;m showing how to leverage memory and IO limits in order to control Page Cache eviction and improve the reliability of services, I want to delve a bit deeper into &lt;code>mmap()&lt;/code> syscall. We need to understand what is happening under the hood and shed more light on the reading and writing process with &lt;code>mmap()&lt;/code>.&lt;/p>
&lt;h2 id="mmap-overview">
 &lt;code>mmap()&lt;/code> overview
 &lt;a class="anchor" href="#mmap-overview">#&lt;/a>
&lt;/h2>
&lt;p>Memory mapping is one of the most interesting features of Linux systems. One of its features is the ability for software developers to work transparently with files whose size exceeds the actual physical memory of the system. In the image below, you can see what the &lt;a href="https://en.wikipedia.org/wiki/Virtual_memory" target="_blank" rel="noopener">Virtual Memory&lt;/a> of a process looks like. Each process has its own region where &lt;code>mmap()&lt;/code> maps files.&lt;/p></description></item><item><title>systemd-resolved</title><link>https://biriukov.dev/docs/resolver-dual-stack-application/10-systemd-resolved/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://biriukov.dev/docs/resolver-dual-stack-application/10-systemd-resolved/</guid><description>&lt;h1 id="10-systemd-resolved">
 10. systemd-resolved
 &lt;a class="anchor" href="#10-systemd-resolved">#&lt;/a>
&lt;/h1>
&lt;h2 id="101-managing-etcresolvconf-content">
 10.1 Managing &lt;code>/etc/resolv.conf&lt;/code> content
 &lt;a class="anchor" href="#101-managing-etcresolvconf-content">#&lt;/a>
&lt;/h2>
&lt;p>The main issue with &lt;code>/etc/resolv.conf&lt;/code> is managing it in modern distributions, which can have multiple sources of nameserver and search domain information due to multiple interfaces (both real and virtual, such as VPN tunnels) with concurrent DHCP clients.&lt;/p>
&lt;p>The legacy method to handle this complexity was the &lt;code>&lt;a href="https://en.wikipedia.org/wiki/Resolvconf" target="_blank" rel="noopener">Resolvconf&lt;/a>&lt;/code> project. It set up a number of hooks and updated &lt;code>/etc/resolv.conf&lt;/code> appropriately by following some defined rules. However, its main issue is its lack of flexibility and inability to manage several nameservers and search domains on a per-link basis, which is sometimes needed in complex setups.&lt;/p></description></item><item><title>Cgroup v2 and Page Cache</title><link>https://biriukov.dev/docs/page-cache/6-cgroup-v2-and-page-cache/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://biriukov.dev/docs/page-cache/6-cgroup-v2-and-page-cache/</guid><description>&lt;h1 id="cgroup-v2-and-page-cache">
 Cgroup v2 and Page Cache
 &lt;a class="anchor" href="#cgroup-v2-and-page-cache">#&lt;/a>
&lt;/h1>
&lt;p>The cgroup subsystem is the way to distribute and limit system resources fairly. It organizes all data in a hierarchy where the leaf nodes depend on their parents and inherit their settings. In addition, the cgroup provides a lot of helpful resource counters and statistics.&lt;/p>
&lt;p>The control groups are everywhere. Even though you may not use them explicitly, they are already turned on by default in all modern GNU/Linux distributives and got integrated into &lt;code>systemd&lt;/code>. It means that each service in a modern linux system runs under its own cgroup.&lt;/p></description></item><item><title>Querying Nameservers on dual-stack hosts</title><link>https://biriukov.dev/docs/resolver-dual-stack-application/11-querying-nameservers-on-dual-stack-hosts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://biriukov.dev/docs/resolver-dual-stack-application/11-querying-nameservers-on-dual-stack-hosts/</guid><description>&lt;h1 id="11-querying-nameservers-on-dual-stack-hosts">
 11. Querying Nameservers on dual-stack hosts
 &lt;a class="anchor" href="#11-querying-nameservers-on-dual-stack-hosts">#&lt;/a>
&lt;/h1>
&lt;p>The already seen &lt;a href="https://datatracker.ietf.org/doc/html/rfc8305" target="_blank" rel="noopener">RFC 8305 Happy Eyeballs Version 2: Better Connectivity Using Concurrency&lt;/a> force the same preference for IPv6 name servers as it does for establishing new connections:&lt;/p>
&lt;blockquote>
&lt;p>If multiple DNS server addresses are configured for the current network, the client may have the option of sending its DNS queries over IPv4 or IPv6. In keeping with the Happy Eyeballs approach, queries SHOULD be sent over IPv6 first (note that this is not referring to the sending of &lt;code>AAAA&lt;/code> or &lt;code>A&lt;/code> queries, but rather the address of the DNS server itself and IP version used to transport DNS messages). If DNS queries sent to the IPv6 address do not receive responses, that address may be marked as penalized and queries can be sent to other DNS server addresses.&lt;/p></description></item><item><title>The Present and the future of resolvers and DNS related features</title><link>https://biriukov.dev/docs/resolver-dual-stack-application/12-present-and-future-of-resolvers-and-dns-related-features/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://biriukov.dev/docs/resolver-dual-stack-application/12-present-and-future-of-resolvers-and-dns-related-features/</guid><description>&lt;h1 id="12-the-present-and-the-future-of-resolvers-and-dns-related-features">
 12. The Present and the future of resolvers and DNS related features
 &lt;a class="anchor" href="#12-the-present-and-the-future-of-resolvers-and-dns-related-features">#&lt;/a>
&lt;/h1>
&lt;p>Let me briefly review some important features and topics related to DNS, stub resolvers, and dual-stack applications. While these are beyond the scope of this series, they are worth mentioning.&lt;/p>
&lt;h2 id="121-new-dns-record-https">
 12.1 New DNS record: HTTPS
 &lt;a class="anchor" href="#121-new-dns-record-https">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://www.rfc-editor.org/rfc/rfc9460.html" target="_blank" rel="noopener">DNS has introduced&lt;/a> a new and interesting resource record called HTTPS. This record addresses problems related to web service clients. Typically, when a client has only a domain name without additional information, it connects using plain text port 80. The server usually redirects to port 443 with HTTPS and sets an &lt;a href="https://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security" target="_blank" rel="noopener">HSTS&lt;/a> header. However, this initial plain text request-response has security issues and is vulnerable to Man-in-the-Middle (&lt;a href="https://en.wikipedia.org/wiki/Man-in-the-middle_attack" target="_blank" rel="noopener">MitM&lt;/a>) attacks.&lt;/p></description></item><item><title>Troubleshooting tools for resolvers and DNS</title><link>https://biriukov.dev/docs/resolver-dual-stack-application/troubleshooting-tools-for-resolvers-and-dns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://biriukov.dev/docs/resolver-dual-stack-application/troubleshooting-tools-for-resolvers-and-dns/</guid><description>&lt;h1 id="tools-for-troubleshooting-in-one-place">
 Tools for troubleshooting in one place
 &lt;a class="anchor" href="#tools-for-troubleshooting-in-one-place">#&lt;/a>
&lt;/h1>
&lt;p>Let me reiterate and consolidate all the tools that can be used to troubleshoot applications and systems when the stub resolver is under suspicion.&lt;/p>
&lt;h2 id="-getent">
 • &lt;code>getent&lt;/code>
 &lt;a class="anchor" href="#-getent">#&lt;/a>
&lt;/h2>
&lt;p>&lt;code>&lt;a href="https://man7.org/linux/man-pages/man1/getent.1.html" target="_blank" rel="noopener">man 1 getent&lt;/a>&lt;/code>&lt;/p>
&lt;p>When you need to query hostname via all NSS modules:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ getent host microsoft.com
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ getent ahost microsoft.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="-tcpdump">
 • &lt;code>tcpdump&lt;/code>
 &lt;a class="anchor" href="#-tcpdump">#&lt;/a>
&lt;/h2>
&lt;p>To dump in a user friendly format all requests to 53 port:&lt;/p></description></item><item><title>Unique set size and working set size</title><link>https://biriukov.dev/docs/page-cache/7-how-much-memory-my-program-uses-or-the-tale-of-working-set-size/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://biriukov.dev/docs/page-cache/7-how-much-memory-my-program-uses-or-the-tale-of-working-set-size/</guid><description>&lt;h1 id="how-much-memory-my-program-uses-or-the-tale-of-working-set-size">
 How much memory my program uses or the tale of working set size
 &lt;a class="anchor" href="#how-much-memory-my-program-uses-or-the-tale-of-working-set-size">#&lt;/a>
&lt;/h1>
&lt;p>Currently, in the world of containers, auto-scaling, and on-demand clouds, it&amp;rsquo;s vital to understand the resource needs of services both in norman regular situations and under pressure near the software limits. But every time someone touches on the topic of memory usage, it becomes almost immediately unclear what and how to measure. RAM is a valuable and often expensive type of hardware. In some cases, its latency is even more important than disk latency. Therefore, the Linux kernel tries as hard as it can to optimize memory utilization, for instance by sharing the same pages among processes. In addition, the Linux Kernel has its Page Cache in order to improve storage IO speed by storing a subset of the disk data in memory. Page Cache not only, by its nature, performs implicit memory sharing, which usually confuses users, but also actively asynchronously works with the storage in the background. Thus, Page Cache brings even more complexity to the table of memory usage estimation.&lt;/p></description></item><item><title>Direct IO</title><link>https://biriukov.dev/docs/page-cache/8-direct-io-dio/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://biriukov.dev/docs/page-cache/8-direct-io-dio/</guid><description>&lt;h1 id="direct-io-dio-not-ready">
 Direct IO (DIO) (NOT READY)
 &lt;a class="anchor" href="#direct-io-dio-not-ready">#&lt;/a>
&lt;/h1>
&lt;p>As usual, there is always an exception to any rule. And Page Cache is no different. So let&amp;rsquo;s talk about file reads and writes, which can ignore Page Cache content.&lt;/p>
&lt;h2 id="why-its-good">
 Why it’s good
 &lt;a class="anchor" href="#why-its-good">#&lt;/a>
&lt;/h2>
&lt;p>Some applications require low-level access to the storage subsystem and the linux kernel gives such a feature by providing &lt;code>O_DIRECT&lt;/code> file open flag. This IO is called the Direct IO or DIO. A program, which opens a file with this flag, bypasses the kernel Page Cache completely and directly communicates with the VFS and the underlying filesystem.&lt;/p></description></item><item><title>Advanced Page Cache observability and troubleshooting tools</title><link>https://biriukov.dev/docs/page-cache/9-advanced-page-cache-observability-and-troubleshooting-tools/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://biriukov.dev/docs/page-cache/9-advanced-page-cache-observability-and-troubleshooting-tools/</guid><description>&lt;h1 id="advanced-page-cache-observability-and-troubleshooting-tools">
 Advanced Page Cache observability and troubleshooting tools
 &lt;a class="anchor" href="#advanced-page-cache-observability-and-troubleshooting-tools">#&lt;/a>
&lt;/h1>
&lt;p>Let&amp;rsquo;s touch on some advanced tools we can use to perform low-level kernel tracing and debugging.&lt;/p>
&lt;h2 id="ebpf-tools">
 eBPF tools
 &lt;a class="anchor" href="#ebpf-tools">#&lt;/a>
&lt;/h2>
&lt;p>First of all, we can use &lt;code>eBPF&lt;/code> tools. The [&lt;code>bcc&lt;/code>]https://github.com/iovisor/bcc and &lt;a href="https://github.com/iovisor/bpftrace" target="_blank" rel="noopener">&lt;code>bpftrace&lt;/code>&lt;/a> are your friends when you want to get some internal kernel information.&lt;/p>
&lt;p>Let&amp;rsquo;s take a look at some tools which come with it.&lt;/p>
&lt;h3 id="writeback-monitor">
 Writeback monitor
 &lt;a class="anchor" href="#writeback-monitor">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ sudo bpftrace ./writeback.bt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Attaching &lt;span style="color:#ae81ff">4&lt;/span> probes...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Tracing writeback... Hit Ctrl-C to end.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TIME DEVICE PAGES REASON ms
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>15:01:48 btrfs-1 &lt;span style="color:#ae81ff">7355&lt;/span> periodic 0.003
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>15:01:49 btrfs-1 &lt;span style="color:#ae81ff">7355&lt;/span> periodic 0.003
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>15:01:51 btrfs-1 &lt;span style="color:#ae81ff">7355&lt;/span> periodic 0.006
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>15:01:54 btrfs-1 &lt;span style="color:#ae81ff">7355&lt;/span> periodic 0.005
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>15:01:54 btrfs-1 &lt;span style="color:#ae81ff">7355&lt;/span> periodic 0.004
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>15:01:56 btrfs-1 &lt;span style="color:#ae81ff">7355&lt;/span> periodic 0.005
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="page-cache-top">
 Page Cache Top
 &lt;a class="anchor" href="#page-cache-top">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>19:49:52 Buffers MB: &lt;span style="color:#ae81ff">0&lt;/span> / Cached MB: &lt;span style="color:#ae81ff">610&lt;/span> / Sort: HITS / Order: descending 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PID UID CMD HITS MISSES DIRTIES READ_HIT% WRITE_HIT% 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">66229&lt;/span> vagrant vmtouch &lt;span style="color:#ae81ff">44745&lt;/span> &lt;span style="color:#ae81ff">44032&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 50.4% 49.6% 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">66229&lt;/span> vagrant bash &lt;span style="color:#ae81ff">205&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 100.0% 0.0% 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">66227&lt;/span> root cachetop &lt;span style="color:#ae81ff">17&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 100.0% 0.0% 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">222&lt;/span> dbus dbus-daemon &lt;span style="color:#ae81ff">16&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 100.0% 0.0% 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">317&lt;/span> vagrant tmux: server &lt;span style="color:#ae81ff">4&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 100.0% 0.0%
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="cache-stat">
 Cache stat
 &lt;a class="anchor" href="#cache-stat">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>vagrant@archlinux tools&lt;span style="color:#f92672">]&lt;/span>$ sudo ./cachestat 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> HITS MISSES DIRTIES HITRATIO BUFFERS_MB CACHED_MB 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">10&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 100.00% &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">610&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">4&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 100.00% &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">610&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">4&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 100.00% &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">610&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">21&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 100.00% &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">610&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">624&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 100.00% &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">438&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 100.00% &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">438&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">4&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 100.00% &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">438&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 0.00% &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">438&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">19&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 100.00% &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">438&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">428&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 0.00% &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">546&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">28144&lt;/span> &lt;span style="color:#ae81ff">16384&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 63.21% &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">610&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 0.00% &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">610&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 0.00% &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">610&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">17&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 100.00% &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">610&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 0.00% &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">610&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="bpftrace-and-kfunc-trace">
 &lt;code>bpftrace&lt;/code> and &lt;code>kfunc&lt;/code> trace
 &lt;a class="anchor" href="#bpftrace-and-kfunc-trace">#&lt;/a>
&lt;/h3>
&lt;p>Other than that, &lt;code>eBPF&lt;/code> and &lt;code>bpftrace&lt;/code> have recently got a new great feature named &lt;a href="https://github.com/iovisor/bpftrace/blob/master/docs/reference_guide.md#15-kfunckretfunc-kernel-functions-tracing" target="_blank" rel="noopener">&lt;code>kfunc&lt;/code>&lt;/a>. Thus, using it, you can trace some kernel functions without kernel debugging information installed.&lt;/p></description></item></channel></rss>