<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>GNU/Linux shell related internals on Viacheslav Biriukov</title><link>http://localhost:1313/docs/fd-pipe-session-terminal/</link><description>Recent content in GNU/Linux shell related internals on Viacheslav Biriukov</description><generator>Hugo</generator><language>en-us</language><atom:link href="http://localhost:1313/docs/fd-pipe-session-terminal/index.xml" rel="self" type="application/rss+xml"/><item><title>GNU/Linux shell related internals</title><link>http://localhost:1313/docs/fd-pipe-session-terminal/0-sre-should-know-about-gnu-linux-shell-related-internals-file-descriptors-pipes-terminals-user-sessions-process-groups-and-daemons/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/fd-pipe-session-terminal/0-sre-should-know-about-gnu-linux-shell-related-internals-file-descriptors-pipes-terminals-user-sessions-process-groups-and-daemons/</guid><description>What every SRE should know about GNU/Linux shell related internals: file descriptors, pipes, terminals, user sessions, process groups and daemons # Despite the era of containers, virtualization, and the rising number of UI of all kinds, SREs often spend a significant part of their time in GNU/Linux shells. It could be debugging, testing, developing, or preparing the new infrastructure. It may be the good old bash, the more recent and fancy zsh, or even fish or tcsh with their interesting and unique features.</description></item><item><title>File descriptor and open file description</title><link>http://localhost:1313/docs/fd-pipe-session-terminal/1-file-descriptor-and-open-file-description/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/fd-pipe-session-terminal/1-file-descriptor-and-open-file-description/</guid><description>File descriptor and open file description # First of all, I want to touch on the two fundamental concepts of working with files:
file descriptor; open file description. These two abstractions are crucial for understanding the internals of a process creation, communication, and data transition.
The first concept is a file descriptor or fd. It’s a positive integer number used by file system calls instead of a file path in order to make a variety of operations.</description></item><item><title>Pipes</title><link>http://localhost:1313/docs/fd-pipe-session-terminal/2-pipes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/fd-pipe-session-terminal/2-pipes/</guid><description>Pipes # The pipe is a neat feature of the Linux kernel that allows us to build one-directional communication channels between related processes (often a parent and a child).
Pipes are usually well known from shells, where we use &amp;ldquo;|&amp;rdquo; symbol to build command pipelines. But first of all, the pipe is a system call, or actually, there are 2 of them: pipe() and pipe2() (man 2 pipe).
You can think of a pipe as a memory buffer with a byte stream API.</description></item><item><title>Process groups, jobs and sessions</title><link>http://localhost:1313/docs/fd-pipe-session-terminal/3-process-groups-jobs-and-sessions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/fd-pipe-session-terminal/3-process-groups-jobs-and-sessions/</guid><description>Process groups, jobs and sessions # A new process group is created every time we execute a command or a pipeline of commands in a shell. Inside a shell, a process group is usually called a job. In its turn, each process group belongs to a session. Linux kernel provides a two-level hierarchy for all running processes (look at Image 3 below). As such, a process group is a set of processes, and a session is a set of related process groups.</description></item><item><title>Terminals and pseudoterminals</title><link>http://localhost:1313/docs/fd-pipe-session-terminal/4-terminals-and-pseudoterminals/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/fd-pipe-session-terminal/4-terminals-and-pseudoterminals/</guid><description>Terminals and pseudoterminals # Terminals come to us from the history of UNIX systems. Basically, terminals provided an API for the console utils (physical ones!) to generalize interaction with users. It includes ways of reading input and writing to it in two modes:
the canonical mode (default) – input is buffered line by line and read into after a new line char \n occurs; the noncanonical mode – an application can read terminal input a character at a time.</description></item></channel></rss>